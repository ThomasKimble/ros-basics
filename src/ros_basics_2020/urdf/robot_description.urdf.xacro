<?xml version="1.0"?>

<robot xmlns:xacro="https://www.ros.org/wiki/xacro" name="THYMIO">

    <xacro:include filename="$(find ros_basics_2020)/urdf/macros.xacro" />
    <xacro:include filename="$(find ros_basics_2020)/urdf/materials.xacro" />


    <!-- Below you will find the rough specifications of the robot's mass and size -->
    <xacro:arg name="left_wheel_mu" default="100.0"/>
    <xacro:property name="left_wheel_mu_p" value="$(arg left_wheel_mu)"/>

    <xacro:arg name="right_wheel_mu" default="100.0"/>
    <xacro:property name="right_wheel_mu_p" value="$(arg right_wheel_mu)"/>
    
    <!-- radius of a single Thymio's wheel -->
    <xacro:property name="wheel_r" value="0.022"/>

    <!-- length of a single Thymio's wheel (if you think of the wheel as a cylinder, 
         this would be the cylinder length) -->
    <xacro:property name="wheel_l" value="0.015"/>

    <!-- The total mass of the Thymio -->
    <xacro:arg name="mass" default="0.270"/>
    <xacro:property name="mass_p" value="$(arg mass)"/>

        <!-- Thymio's mass is distributed 20% at the wheels and 80% at the main body  -->
    <xacro:property name="body_mass" value="${mass_p * 0.80}"/>
    <xacro:property name="wheel_mass" value="${mass_p * 0.10}"/>


    <!-- Design your robot here using simple shapes (i.e., boxes, cylinders, spheres) -->

    <link name="main_body">
        <inertial>
            <mass value="${body_mass}"/>
            <!-- This is the actual size of the Thymio's main body -->
            <xacro:box_inertia m="${body_mass}" x="0.11" y="0.112" z="0.045" /> 

            <!-- Within this scope you need to define the inertial properties of the robot -->
            <!-- Take note that here we use the macro xacro:box_inertia defined int the macros.xacro -->
            <!-- If you are confident enough you can compute the inertia values on your own, 
                 but be very careful to do it correctly -->
        </inertial>
        
        <!-- The collision shape is used for the physics-->
        <!-- In most cases (and especially for simple shapes) this should match
        the visual shape defined below. However, there are cases where it would
        make sense for those 2 to be different. If for example the visual shape
        is very complicated, then to accelerate the computation of the collision
        detector, we could image using a rough approximation of the visual shape. -->
        <collision name="collision_body">
            <origin xyz="0 0 ${0.045/2 + 0.01}"/>
            <geometry>
                <box size="0.11 0.112 0.045"/>
            </geometry>
            <material name="white"/>
        </collision>

        <!-- This is the shape that will be visualized by most of the simulators
        and visual tools. Some (like gazebo) might use the collision instead. 
        Despite this being a "cosmetic" description, make sure it matches the 
        above so that you can visually detect problems. -->
        <visual name="visual_body">
            <origin xyz="0 0 ${0.045/2 + 0.01}"/>
            <geometry>
                <box size="0.11 0.112 0.045"/>
            </geometry>
            <material name="white"/>
        </visual>

        <visual name="group_number">
            <origin xyz="0 -0.025 ${0.045 + 0.01}"/>
            <geometry>
                <box size="0.07 0.0075 0.005"/>
            </geometry>
            <material name="black"/>
        </visual>

        <visual name="group_number">
            <origin xyz="0 0.025 ${0.045 + 0.01}"/>
            <geometry>
                <box size="0.07 0.0075 0.005"/>
            </geometry>
            <material name="black"/>
        </visual>

        <visual name="group_number">
            <origin xyz="-0.0175 0 ${0.045 + 0.01}"/>
            <geometry>
                <box size="0.035 0.0075 0.005"/>
            </geometry>
            <material name="black"/>
        </visual>

        <visual name="group_number">
            <origin xyz="0 0.01 ${0.045 + 0.01}"/>
            <geometry>
                <box size="0.0075 0.0275 0.005"/>
            </geometry>
            <material name="black"/>
        </visual>

        <visual name="visual_sensor_front">
            <origin xyz="${0.11/2} 0 ${0.045/2 + 0.01}"/>
            <geometry>
                <box size="0.01 0.02 0.01"/>
            </geometry>
            <material name="black"/>
        </visual>

        <visual name="visual_sensor_left">
            <origin xyz="0.04 ${0.112/2} ${0.045/2 + 0.01}"/>
            <geometry>
                <box size="0.02 0.01 0.01"/>
            </geometry>
            <material name="black"/>
        </visual>

        <visual name="visual_sensor_right">
            <origin xyz="0.04 ${-0.112/2} ${0.045/2 + 0.01}"/>
            <geometry>
                <box size="0.02 0.01 0.01"/>
            </geometry>
            <material name="black"/>
        </visual>

        <collision name="collision_sphere">
            <origin xyz="0.035 0 0.01"/>
            <geometry>
                <sphere radius="0.01"/>
            </geometry>
            <material name="white"/>
        </collision>

        <visual name="visual_sphere">
            <origin xyz="0.03 0 0.01"/>
            <geometry>
                <sphere radius="0.01"/>
            </geometry>
            <material name="white"/>
        </visual>
    </link>

    <!-- Below you will find the joints and links for the wheels -->
    <joint name="left_wheel_joint" type="continuous">
        <parent link="main_body"/>
        <child link="left_wheel"/>
        <axis rpy="0 0 0" xyz="0 1 0"/>
        <origin xyz="-0.025 0.056 ${wheel_r}"/>
    </joint>

    <link name="left_wheel">
        <inertial>
            <mass value="${wheel_mass}"/>
            <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_r}" h="${wheel_l}"/> 
        </inertial>

        <collision name="collision_wheel">
            <origin xyz="0 0 0" rpy="1.5708 0 0"/>
            <geometry>
                <cylinder radius="${wheel_r}" length="${wheel_l}"/>
            </geometry>
            <material name="black"/>
        </collision>

        <visual name="visual_wheel">
            <origin xyz="0 0 0" rpy="1.5708 0 0"/>
            <geometry>
                <cylinder radius="${wheel_r}" length="${wheel_l}"/>
            </geometry>
            <material name="black"/>
        </visual>
    </link>

    <joint name="right_wheel_joint" type="continuous">
        <parent link="main_body"/>
        <child link="right_wheel"/>
        <axis rpy="0 0 0" xyz="0 1 0"/>
        <origin xyz="-0.025 -0.056 ${wheel_r}"/>
    </joint>

    <link name="right_wheel">
        <inertial>
            <mass value="${wheel_mass}"/>
            <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_r}" h="${wheel_l}"/> 
        </inertial>

        <collision name="collision_wheel">
            <origin xyz="0 0 0" rpy="1.5708 0 0"/>
            <geometry>
                <cylinder radius="${wheel_r}" length="${wheel_l}"/>
            </geometry>
            <material name="black"/>
        </collision>

        <visual name="visual_wheel">
            <origin xyz="0 0 0" rpy="1.5708 0 0"/>
            <geometry>
                <cylinder radius="${wheel_r}" length="${wheel_l}"/>
            </geometry>
            <material name="black"/>
        </visual>
    </link>

    <xacro:csensor plink="main_body" side="front" mass="0.001" originrpy="0 0 -1.5708" originxyz="-0.003 0 0" originjoint="${0.11/2} 0 ${0.045/2 + 0.01}" />

    <xacro:csensor plink="main_body" side="left" mass="0.001" originrpy="0 0 -3.1416" originxyz="0 -0.003 0" originjoint="0.04 ${0.112/2} ${0.045/2 + 0.01}" />

    <xacro:csensor plink="main_body" side="right" mass="0.001" originrpy="0 0 3.1416" originxyz="0 0.003 0" originjoint="0.04 ${-0.112/2} ${0.045/2 + 0.01}" />

    <!-- Below you will find samples of gazebo plugins you may want to use. -->
    <!-- These should be adapted to your robot's design -->
    <gazebo reference="sensor_front">  
        <sensor type="ray" name="laser_front">
            <pose>0 0 0 0 0 0</pose>
            <ray>
                <scan>
                    <horizontal>
                        <samples>13</samples>
                        <resolution>1</resolution>
                        <min_angle>-1.5</min_angle>
                        <max_angle>1.5</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <!-- You can edit adapt these to your robot's size -->
                    <min>0.001</min>
                    <max>0.2</max>
                    <resolution>0.0001</resolution>
                </range>
            </ray>
            <plugin name="laser" filename="libgazebo_ros_laser.so" >
                <topicName>laser_front/scan</topicName>
                <frameName>sensor_front</frameName>
            </plugin>
            <always_on>1</always_on>
            <update_rate>10</update_rate>
            <visualize>true</visualize>
        </sensor>
    </gazebo> 

    <gazebo reference="sensor_left">  
        <sensor type="ray" name="laser_left">
            <pose>0 0 0 0 0 0</pose>
            <ray>
                <scan>
                    <horizontal>
                        <samples>13</samples>
                        <resolution>1</resolution>
                        <min_angle>0.0708</min_angle>
                        <max_angle>3.0708</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <!-- You can edit adapt these to your robot's size -->
                    <min>0.001</min>
                    <max>0.2</max>
                    <resolution>0.0001</resolution>
                </range>
            </ray>
            <plugin name="laser" filename="libgazebo_ros_laser.so" >
                <topicName>laser_left/scan</topicName>
                <frameName>sensor_left</frameName>
            </plugin>
            <always_on>1</always_on>
            <update_rate>10</update_rate>
            <visualize>true</visualize>
        </sensor>
    </gazebo> 

    <gazebo reference="sensor_right">  
        <sensor type="ray" name="laser_right">
            <pose>0 0 0 0 0 0</pose>
            <ray>
                <scan>
                    <horizontal>
                        <samples>13</samples>
                        <resolution>1</resolution>
                        <min_angle>-3.0708</min_angle>
                        <max_angle>-0.0708</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <!-- You can edit adapt these to your robot's size -->
                    <min>0.001</min>
                    <max>0.2</max>
                    <resolution>0.0001</resolution>
                </range>
            </ray>
            <plugin name="laser" filename="libgazebo_ros_laser.so" >
                <topicName>laser_right/scan</topicName>
                <frameName>sensor_right</frameName>
            </plugin>
            <always_on>1</always_on>
            <update_rate>10</update_rate>
            <visualize>true</visualize>
        </sensor>
    </gazebo> 

    <gazebo>
        <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
            <alwaysOn>true</alwaysOn>
            <updateRate>20</updateRate>
            <leftJoint>left_wheel_joint</leftJoint>
            <rightJoint>right_wheel_joint</rightJoint>
            <wheelSeparation>0.11</wheelSeparation>
            <wheelDiameter>0.044</wheelDiameter>
            <!-- <wheelTorque>10</wheelTorque> -->

            <commandTopic>cmd_vel</commandTopic>
            <odometryTopic>odom</odometryTopic>
            <odometryFrame>odom</odometryFrame>

            <robotBaseFrame>main_body</robotBaseFrame>
        </plugin>
    </gazebo>

</robot>